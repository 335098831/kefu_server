// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client.proto

package grpcs

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Respones struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Respones) Reset()         { *m = Respones{} }
func (m *Respones) String() string { return proto.CompactTextString(m) }
func (*Respones) ProtoMessage()    {}
func (*Respones) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{0}
}

func (m *Respones) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Respones.Unmarshal(m, b)
}
func (m *Respones) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Respones.Marshal(b, m, deterministic)
}
func (m *Respones) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Respones.Merge(m, src)
}
func (m *Respones) XXX_Size() int {
	return xxx_messageInfo_Respones.Size(m)
}
func (m *Respones) XXX_DiscardUnknown() {
	xxx_messageInfo_Respones.DiscardUnknown(m)
}

var xxx_messageInfo_Respones proto.InternalMessageInfo

func (m *Respones) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Request struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_014de31d7ac8c57c, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*Respones)(nil), "grpcs.Respones")
	proto.RegisterType((*Request)(nil), "grpcs.Request")
}

func init() {
	proto.RegisterFile("client.proto", fileDescriptor_014de31d7ac8c57c)
}

var fileDescriptor_014de31d7ac8c57c = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xc9, 0x4c,
	0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2f, 0x2a, 0x48, 0x2e, 0x56,
	0x92, 0xe3, 0xe2, 0x08, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x4b, 0x2d, 0x16, 0x12, 0xe2, 0x62, 0x49,
	0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x64, 0xb9, 0xd8,
	0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xb0, 0x49, 0x1b, 0x2d, 0x65, 0xe4, 0x62, 0xf1, 0x4e,
	0x4d, 0x2b, 0x15, 0x32, 0xe7, 0x12, 0x72, 0x4f, 0x2d, 0xf1, 0xcf, 0xcb, 0xc9, 0xcc, 0x4b, 0x75,
	0xcc, 0xc9, 0x09, 0xca, 0x4f, 0xca, 0x2f, 0x29, 0x16, 0xe2, 0xd3, 0x03, 0xdb, 0xa2, 0x07, 0x35,
	0x42, 0x8a, 0x1f, 0xce, 0x87, 0x58, 0xa9, 0xc4, 0x20, 0x64, 0xc0, 0xc5, 0x1d, 0x50, 0x5a, 0x9c,
	0xe1, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x4a, 0x8c, 0x0e, 0x23, 0x2e, 0x5e, 0xe7, 0xc4, 0xbc,
	0xe4, 0xd4, 0x1c, 0xe2, 0xf5, 0x24, 0xb1, 0x81, 0x3d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x0b, 0x6e, 0x06, 0xcc, 0x04, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KefuClient is the client API for Kefu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KefuClient interface {
	GetOnlineAllRobots(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Respones, error)
	PushMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Respones, error)
	CancelMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Respones, error)
}

type kefuClient struct {
	cc grpc.ClientConnInterface
}

func NewKefuClient(cc grpc.ClientConnInterface) KefuClient {
	return &kefuClient{cc}
}

func (c *kefuClient) GetOnlineAllRobots(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Respones, error) {
	out := new(Respones)
	err := c.cc.Invoke(ctx, "/grpcs.Kefu/GetOnlineAllRobots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kefuClient) PushMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Respones, error) {
	out := new(Respones)
	err := c.cc.Invoke(ctx, "/grpcs.Kefu/PushMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kefuClient) CancelMessage(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Respones, error) {
	out := new(Respones)
	err := c.cc.Invoke(ctx, "/grpcs.Kefu/CancelMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KefuServer is the server API for Kefu service.
type KefuServer interface {
	GetOnlineAllRobots(context.Context, *Request) (*Respones, error)
	PushMessage(context.Context, *Request) (*Respones, error)
	CancelMessage(context.Context, *Request) (*Respones, error)
}

// UnimplementedKefuServer can be embedded to have forward compatible implementations.
type UnimplementedKefuServer struct {
}

func (*UnimplementedKefuServer) GetOnlineAllRobots(ctx context.Context, req *Request) (*Respones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnlineAllRobots not implemented")
}
func (*UnimplementedKefuServer) PushMessage(ctx context.Context, req *Request) (*Respones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMessage not implemented")
}
func (*UnimplementedKefuServer) CancelMessage(ctx context.Context, req *Request) (*Respones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelMessage not implemented")
}

func RegisterKefuServer(s *grpc.Server, srv KefuServer) {
	s.RegisterService(&_Kefu_serviceDesc, srv)
}

func _Kefu_GetOnlineAllRobots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KefuServer).GetOnlineAllRobots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcs.Kefu/GetOnlineAllRobots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KefuServer).GetOnlineAllRobots(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kefu_PushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KefuServer).PushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcs.Kefu/PushMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KefuServer).PushMessage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kefu_CancelMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KefuServer).CancelMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcs.Kefu/CancelMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KefuServer).CancelMessage(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kefu_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcs.Kefu",
	HandlerType: (*KefuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOnlineAllRobots",
			Handler:    _Kefu_GetOnlineAllRobots_Handler,
		},
		{
			MethodName: "PushMessage",
			Handler:    _Kefu_PushMessage_Handler,
		},
		{
			MethodName: "CancelMessage",
			Handler:    _Kefu_CancelMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
